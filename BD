-- Tabela de Perfis
CREATE TABLE perfil (
  id SERIAL PRIMARY KEY,
  nome TEXT UNIQUE NOT NULL
);

-- Inserção dos perfis
INSERT INTO perfil (nome) VALUES ('Licitante'), ('Leiloeiro');

-- Tabela de Usuários
CREATE TABLE usuario (
  id SERIAL PRIMARY KEY,
  nome_completo TEXT NOT NULL,
  email TEXT UNIQUE NOT NULL,
  telefone_celular TEXT,
  cpf TEXT UNIQUE NOT NULL,
  senha TEXT NOT NULL,
  endereco_carteira TEXT,
  foto TEXT
);

-- Tabela de Perfis de Usuário
CREATE TABLE usuario_perfil (
  id SERIAL PRIMARY KEY,
  usuario_id INTEGER REFERENCES usuario(id) ON DELETE CASCADE,
  perfil_id INTEGER REFERENCES perfil(id) ON DELETE CASCADE,
  UNIQUE (usuario_id, perfil_id)
);

-- Tabela de Leilões
CREATE TABLE leilao (
  id SERIAL PRIMARY KEY,
  nome_ativo TEXT NOT NULL,
  raca TEXT,
  data_inicio TIMESTAMP NOT NULL,
  valor_inicial DECIMAL(10,2) NOT NULL,
  duracao INTERVAL NOT NULL,
  descricao TEXT,
  foto TEXT,
  criador_id INTEGER REFERENCES usuario(id) ON DELETE SET NULL,
  status TEXT NOT NULL DEFAULT 'Aberto',
  vencedor_id INTEGER REFERENCES usuario(id) ON DELETE SET NULL,
  data_termino TIMESTAMP
);

-- Tabela de Lances
CREATE TABLE lance (
  id SERIAL PRIMARY KEY,
  valor DECIMAL(10,2) NOT NULL,
  data_hora TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  leilao_id INTEGER REFERENCES leilao(id) ON DELETE CASCADE,
  usuario_id INTEGER REFERENCES usuario(id) ON DELETE CASCADE,
  UNIQUE (leilao_id, usuario_id)
);

-- Função e Trigger para validar lance
CREATE OR REPLACE FUNCTION valida_lance() RETURNS TRIGGER AS $$
BEGIN
  IF NEW.usuario_id = (SELECT criador_id FROM leilao WHERE id = NEW.leilao_id) THEN
    RAISE EXCEPTION 'O criador do leilão não pode fazer lances no próprio leilão';
  END IF;
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER valida_lance_trigger
BEFORE INSERT ON lance
FOR EACH ROW EXECUTE FUNCTION valida_lance();

-- Tabela de Transações
CREATE TABLE transacao (
  id SERIAL PRIMARY KEY,
  lance_id INTEGER REFERENCES lance(id) ON DELETE CASCADE,
  endereco_carteira TEXT NOT NULL,
  valor DECIMAL(10,2) NOT NULL,
  data_hora TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  status TEXT NOT NULL
);

-- Tabela de Histórico de Transações
CREATE TABLE historico_transacao (
  id SERIAL PRIMARY KEY,
  transacao_id INTEGER REFERENCES transacao(id) ON DELETE CASCADE,
  carteira_origem TEXT NOT NULL,
  carteira_destino TEXT NOT NULL,
  valor DECIMAL(10,4) NOT NULL,
  data_hora TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Tabela de Logs
CREATE TABLE logs (
  id SERIAL PRIMARY KEY,
  usuario_id INTEGER REFERENCES usuario(id) ON DELETE SET NULL,
  acao TEXT,
  descricao TEXT,
  data_hora TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);
